bool Human::checkBoundry(unsigned int a,int check) {
	a *= 10;
	switch (check)
	{
	case 1: //can i go to the left?
		if (Position.x > 0 + a +1)
		{
			return true;
			break;
		}
	case 2:  //can i go to the right?
		if (Position.x < boundry.x - a-1)
		{
			return true;
			break;
		}
	case 3: //can I go to up?
		if (Position.y > 0 + a+1)
		{
			return true;
			break;
		}
	case 4://can i go down?
		if (Position.y < boundry.y - a-1)
		{
			return true;
			break;
		}
	default:
		return false;
		break;
	}
	return false;
}

void Human::walk(const std::vector<std::vector<int>>& Intmap) {
	Target(Intmap);
	xMap = Position.x / 10;
	yMap = Position.y / 10;
	std::cout << "\nXmap" << xMap << " ,Ymap " << yMap ;

	if (TargetPosition.x < Position.x && checkBoundry(4, 1) && ((Intmap[xMap - 3][yMap] == 2) || Intmap[xMap - 2][yMap] == 2 || Intmap[xMap - 1][yMap] == 2))
	{
		Position.x -= xVelocity;
	}
	else if (TargetPosition.x > Position.x && checkBoundry(4, 2) && ((Intmap[xMap+3][yMap ] == 2) || Intmap[xMap+2][yMap] == 2 || Intmap[xMap+1][yMap] == 2) ){
		Position.x += xVelocity;
	}
	else if (TargetPosition.y < Position.y && checkBoundry(4, 3) &&( (Intmap[xMap][yMap - 3] == 2) || Intmap[xMap][yMap - 2] == 2 || Intmap[xMap][yMap - 1] == 2))
	{
		Position.y -= yVelocity;
	}
	else if (TargetPosition.y > Position.y && checkBoundry(4, 4) && ((Intmap[xMap][yMap + 3] == 2)|| Intmap[xMap][yMap + 2] == 2 || Intmap[xMap][yMap + 1] == 2 )){
		Position.y += yVelocity;
	}
	else if (checkBoundry(7, 1) && checkBoundry(7, 2))
	{
		 if (Intmap[xMap - 1][yMap] != 3 && Intmap[xMap + 1][yMap] != 3)
		{
			for (int i = 1;i < 7;i++) {
				if (Intmap[xMap - i][yMap] == 3) {
					Position.x -= xVelocity;
					break;
				}
				else if (Intmap[xMap + i][yMap] == 3) {
					Position.x += xVelocity;
					break;
				}
			}
		}
	}
	else if(checkBoundry(7, 3) && checkBoundry(7, 4))
	{
		if (Intmap[xMap ][yMap-1] != 3 && Intmap[xMap ][yMap+1] != 3)
		{
			for (int i = 1;i < 7;i++) {
				if (Intmap[xMap][yMap-i] == 3) {
					Position.y -= yVelocity;
					break;
				}
				else if (Intmap[xMap][yMap+i] == 3) {
					Position.y += yVelocity;
					break;
				}
			}
		}
	}
	else if (!checkBoundry(13, 1))
	{
		Position.x += xVelocity;
	}
	else if (!checkBoundry(13, 2)) {
		Position.x -= xVelocity;
	}
	else if (!checkBoundry(13, 3))
	{
		Position.y += yVelocity;
	}
	else if (!checkBoundry(13, 4)) {
		Position.y -= yVelocity;
	}
	else { BasicWalk(); }

	Target(Intmap);
	/*Position.x += xVelocity;
	Position.y += yVelocity;*/
	//shape.move(Move);

	//checkBoundry();
	shape.setPosition(Position);

	std::cout <<"\nX" << Position.x << " ,Y " << Position.y<<"\n";

	
}




##version 2

/*if (TargetPosition.x < Position.x && checkBoundry(4, 1) && ((Intmap[xMap - 3][yMap] == 3) || Intmap[xMap][yMap] == 3 ))
	{
		Position.x -= xVelocity;
	}
	else if (TargetPosition.x > Position.x && checkBoundry(4, 2) && ((Intmap[xMap+3][yMap ] == 3) || Intmap[xMap][yMap] == 3))
	{
		Position.x += xVelocity;

	}
	else if (TargetPosition.y < Position.y && checkBoundry(4, 3) &&( (Intmap[xMap][yMap - 3] == 3) || Intmap[xMap][yMap] == 3))
	{
		Position.y -= yVelocity;
	}
	else if (TargetPosition.y > Position.y && checkBoundry(4, 4) && ((Intmap[xMap][yMap + 3] == 3)|| Intmap[xMap][yMap] == 3))
	{
		Position.y += yVelocity;
	}
	else if (checkBoundry(7, 1) && checkBoundry(7, 2))
	{
		 if (Intmap[xMap][yMap-1] == 3 || Intmap[xMap ][yMap+1] == 3)
		{
			for (int i = 1;i < 7;i++) {
				if (Intmap[xMap - i][yMap] == 3) {
					Position.x -= xVelocity;
					break;
				}
				else if (Intmap[xMap + i][yMap] == 3) {
					Position.x += xVelocity;
					break;
				}
			}
		}
	}
	else if(checkBoundry(7, 3) && checkBoundry(7, 4))
	{
		if (Intmap[xMap-1 ][yMap] == 3 || Intmap[xMap+1 ][yMap] == 3)
		{
			for (int i = 1;i < 7;i++) {
				if (Intmap[xMap][yMap-i] == 3) {
					Position.y -= yVelocity;
					break;
				}
				else if (Intmap[xMap][yMap+i] == 3) {
					Position.y += yVelocity;
					break;
				}
			}
		}
	}
	else if (!checkBoundry(13, 1))
	{
		Position.x += xVelocity;
	}
	else if (!checkBoundry(13, 2)) {
		Position.x -= xVelocity;
	}
	else if (!checkBoundry(13, 3))
	{
		Position.y += yVelocity;
	}
	else if (!checkBoundry(13, 4)) {
		Position.y -= yVelocity;
	}*/
	//else { BasicWalk(); }